apply plugin: 'com.jfrog.bintray'

version = VERSION_NAME
project.archivesBaseName = POM_ARTIFACT_ID


def isAndroidProject = project.plugins.hasPlugin('com.android.application') || project.plugins.hasPlugin('com.android.library')
if (isAndroidProject) {
    def releaseVariants = project.android.libraryVariants.findAll {
        it.buildType.name.equalsIgnoreCase('release')
    }

    task androidJavadocs(type: Javadoc, dependsOn: 'compileReleaseJavaWithJavac') {
        source = releaseVariants.collect { it.javaCompile.source }
        classpath = files(releaseVariants.collect { files(it.javaCompile.classpath.files,
                project.android.bootClasspath) })

        options {
            links('http://docs.oracle.com/javase/7/docs/api/')
            linksOffline('http://d.android.com/reference', "${android.sdkDirectory}/docs/reference")
        }

        exclude '**/BuildConfig.java'
        exclude '**/R.java'
    }

    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
        classifier = 'javadoc'
        from androidJavadocs.destinationDir
        baseName "${JAR_PREFIX}${project.name}${JAR_POSTFIX}"
    }

    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from project.android.sourceSets.main.java.source
        baseName "${JAR_PREFIX}${project.name}${JAR_POSTFIX}"
    }

    task androidLibraryJar(type: Jar, dependsOn: 'compileReleaseJavaWithJavac' /* == variant.javaCompile */) {
        print project
        //from compileReleaseJavaWithJavac.destinationDir
        exclude '**/R.class'
        exclude '**/BuildConfig.class'
        baseName "${JAR_PREFIX}${project.name}${JAR_POSTFIX}"
    }

    artifacts {
        archives androidLibraryJar
        archives androidSourcesJar
        archives androidJavadocsJar
    }

} else if (project.plugins.hasPlugin('java')) { // Java libraries
    println "[bintray.gradle]java project"
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
    task javadocsJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }
    artifacts {
        archives sourcesJar
        archives javadocsJar
    }
}

logger.info("Published artifacts in ${configurations.archives}:")
configurations.archives.artifacts.files.files.each { logger.info("\t$it"); }



// Bintray
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")

    configurations = ['archives']
    pkg {
        repo = bintrayRepo
        name = bintrayName
        desc = libraryDescription
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = allLicenses
        publish = true
        publicDownloadNumbers = true
        version {
            desc = libraryDescription
            gpg {
                sign = true //Determines whether to GPG sign the files. The default is false
                passphrase = properties.getProperty("bintray.gpg.password")
                //Optional. The passphrase for GPG signing'
            }
        }
    }
}